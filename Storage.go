package main

import(
	"os"
	"encoding/json"
	"code.google.com/p/go-uuid/uuid"
	"gopkg.in/gcfg.v1"
	"io/ioutil"
)

func getConfig() Config{
	var cfg Config

	// Read configuration
	if err := gcfg.ReadFileInto(&cfg, "config.gcfg"); err != nil{
		panic(err)
	}
	return cfg
}

// Persist the fox instance to somewhere
func StoreFox(fox Fox) UUID {

	// Generate the new UUID, anything that came in as an ID overwritten
	// IDs should be generated by the persistence layer, it is part of the API
	fox.Uuid = uuid.New()

	f, err := os.Create(getConfig().Storage.Filepath + fox.Uuid)

	if err != nil{
		panic(err)
	}

	defer f.Close()
	if err:=json.NewEncoder(f).Encode(fox); err != nil{
		panic(err)
	}

	return UUID{Uuid: fox.Uuid}
}

func ReadFox(uuid string) (Fox, error){
	var fox Fox
	data, err := ioutil.ReadFile(getConfig().Storage.Filepath + uuid)

	if err != nil{
		return fox, err
	}

	if err := json.Unmarshal(data, &fox); err != nil{
		return fox, err
	}

	return fox, nil
}